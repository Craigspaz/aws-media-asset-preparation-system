input CreateMAPSAssetsInput {
	bucketObjKey: String!
	prefixLoc: String
	assetId: String
	creationDate: AWSDateTime
	lastModifiedDate: AWSDateTime
	thumbnailLoc: String
	proxyLoc: String
	fileStatus: String
	editUser: String
	videoCodec: String
	audioCodec: String
	fileFormat: String
	fileLength: Float
	frameRate: Float
	frameCount: Int
	numAudioTracks: Int
	numVideoTracks: Int
	fileSize: Int
}

input DeleteMAPSAssetsInput {
	bucketObjKey: String!
}

type MAPSAssets @aws_api_key
@aws_cognito_user_pools {
	bucketObjKey: String!
	prefixLoc: String
	assetId: String
	creationDate: AWSDateTime
	lastModifiedDate: AWSDateTime
	thumbnailLoc: String
	proxyLoc: String
	fileStatus: String
	editUser: String
	videoCodec: String
	audioCodec: String
	fileFormat: String
	fileLength: Float
	frameRate: Float
	frameCount: Int
	numAudioTracks: Int
	numVideoTracks: Int
	fileSize: Int
}

type MAPSAssetsConnection {
	items: [MAPSAssets]
	nextToken: String
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelMAPSAssetsConditionInput {
	prefixLoc: ModelStringInput
	assetId: ModelStringInput
	creationDate: ModelStringInput
	lastModifiedDate: ModelStringInput
	thumbnailLoc: ModelStringInput
	proxyLoc: ModelStringInput
	fileStatus: ModelStringInput
	editUser: ModelStringInput
	videoCodec: ModelStringInput
	audioCodec: ModelStringInput
	fileFormat: ModelStringInput
	fileLength: ModelFloatInput
	frameRate: ModelFloatInput
	frameCount: ModelIntInput
	numAudioTracks: ModelIntInput
	numVideoTracks: ModelIntInput
	fileSize: ModelIntInput
	and: [ModelMAPSAssetsConditionInput]
	or: [ModelMAPSAssetsConditionInput]
	not: ModelMAPSAssetsConditionInput
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

type Mutation @aws_api_key
@aws_cognito_user_pools {
	createMAPSAssets(input: CreateMAPSAssetsInput!, condition: ModelMAPSAssetsConditionInput): MAPSAssets
	updateMAPSAssets(input: UpdateMAPSAssetsInput!, condition: ModelMAPSAssetsConditionInput): MAPSAssets
	deleteMAPSAssets(input: DeleteMAPSAssetsInput!, condition: ModelMAPSAssetsConditionInput): MAPSAssets
}

type Query @aws_api_key
@aws_cognito_user_pools {
	listMAPSAssets(filter: TableMAPSAssetsFilterInput, limit: Int, nextToken: String): MAPSAssetsConnection
	getMAPSAssets(bucketObjKey: String!): MAPSAssets
}

type Subscription {
	onCreateMAPSAssets: MAPSAssets
		@aws_subscribe(mutations: ["createMAPSAssets"])
	onUpdateMAPSAssets: MAPSAssets
		@aws_subscribe(mutations: ["updateMAPSAssets"])
	onDeleteMAPSAssets: MAPSAssets
		@aws_subscribe(mutations: ["deleteMAPSAssets"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableMAPSAssetsFilterInput {
	bucketObjKey: TableStringFilterInput
	prefixLoc: TableStringFilterInput
	assetId: TableStringFilterInput
	creationDate: TableStringFilterInput
	lastModifiedDate: TableStringFilterInput
	thumbnailLoc: TableStringFilterInput
	proxyLoc: TableStringFilterInput
	fileStatus: TableStringFilterInput
	editUser: TableStringFilterInput
	videoCodec: TableStringFilterInput
	audioCodec: TableStringFilterInput
	fileFormat: TableStringFilterInput
	fileLength: TableFloatFilterInput
	frameRate: TableFloatFilterInput
	frameCount: TableIntFilterInput
	numAudioTracks: TableIntFilterInput
	numVideoTracks: TableIntFilterInput
	fileSize: TableIntFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateMAPSAssetsInput {
	bucketObjKey: String!
	prefixLoc: String
	assetId: String
	creationDate: AWSDateTime
	lastModifiedDate: AWSDateTime
	thumbnailLoc: String
	proxyLoc: String
	fileStatus: String
	editUser: String
	videoCodec: String
	audioCodec: String
	fileFormat: String
	fileLength: Float
	frameRate: Float
	frameCount: Int
	numAudioTracks: Int
	numVideoTracks: Int
	fileSize: Int
}